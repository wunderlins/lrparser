#!/usr/bin/env python
# -*- coding: UTF-8 -*-

import os, sys
from urllib2 import urlopen, HTTPError
from uuid import uuid4
from os import remove
from lxml import etree
from datetime import datetime
import sqlite3
from config import *
import magic
from urllib import quote_plus, quote

con = sqlite3.connect(db)
cur = con.cursor()

abspath = os.path.abspath(__file__)
dname = os.path.dirname(abspath)
os.chdir(dname)

class scraper:
	fd = None
	uuid = None
	
	@staticmethod
	def filename():
		return base_folder + "/lparser-" + str(scraper.uuid) + ".html"

	@staticmethod
	def log(msg):
		print msg
	
	@staticmethod
	def close():
		if scraper.fd != None:
			scraper.fd.close()
		
		if not DEBUG:
			remove(scraper.filename())
	
	@staticmethod
	def fetch():
		if scraper.uuid == None:
			scraper.uuid = uuid4()
		
		ud = urlopen(url)
		scraper.log("Temp file: %s" % scraper.filename())
		scraper.fd = open(scraper.filename(), "wb+")
		buffer = ""
		while True:
			buffer = ud.read(1024)
		
			if buffer == "":
				break
			
			scraper.fd.write(buffer)
	
		ud.close()
		scraper.fd.seek(0)
		return scraper.fd
	
	@staticmethod
	def parse(res):
		ret = []
		c=0
		for t in res:
			str = t.attrib['title'].encode('utf-8')
			aStr = str.split(" played @ ")
			aStrTmp = aStr[1].split(". from Album: ")
			aStr[1] = aStrTmp[0] 
			aStr.append(aStrTmp[1])
			song_band = aStr[0].split(" by ")
			dt = datetime.strptime(aStr[1], '%d.%m.%Y %H:%M:%S')
			rec = [dt, song_band[0], song_band[1], aStr[2]]
		
			#print rec
			ret.append(rec)
			
			#cover = t.xpath('//img[@class="playlistcover"]')
			cover = t.find("tr/td/img[@class='playlistcover']")
			url = cover_url + quote(cover.attrib["src"])
			#print url
			id = scraper.download_file(url)
			rec.append(id)
			#for img in cover:
			#	print img.attrib["src"]
			
			c = c + 1
		return ret
	
	@staticmethod
	def download_file(url):
		""" download image and insert it into covers table_name
	
		will return the id of the image in covers table """
		orig_file = url.split("/")[-1]
	
		# check if we already have it
		sql = "SELECT id FROM covers WHERE name=?"
		res = cur.execute(sql, (orig_file,))
		id = cur.fetchone()
	
		# we already have it
		if id != None:
			return id[0]
		
		try:
			ud = urlopen(url)
		except HTTPError:
			return -1

		uuid = uuid4()
		filename = base_folder + "/lparser-" + str(uuid) + ".jpg"
		fd = open(filename, "wb+")
		buffer = ""
		content = ""
		while True:
			buffer = ud.read(1024)
			content += buffer

			if buffer == "":
				break
	
			fd.write(buffer)

		ud.close()
		size = fd.tell()
		#fd.seek(0)
		fd.close()

		mime = magic.Magic(mime=True)
		
		rec = [filename, size, orig_file, mime.from_file(filename), content]
		
		sql = "INSERT INTO covers (name, contenttype, size, data) VALUES (?, ?, ?, ?)"
		cur.execute(sql, (rec[2], rec[3], rec[1], sqlite3.Binary(rec[4])))
		con.commit()

		if not DEBUG:
			remove(filename)
			
		return cur.lastrowid
		#return [filename, size, orig_file, mime.from_file(filename), content]


def lxml2str(tree):
	return etree.tostring(tree, pretty_print=True, method="html")
	
if __name__ == "__main__":
	
	# fetch data
	fd = scraper.fetch()
	
	# parse html
	parser = etree.HTMLParser()
	tree = etree.parse(fd, parser)
	res = tree.getroot().xpath('//tbody[@class="table"]')
	#print str(len(res)) + "\n\n"
	data = scraper.parse(res)	
	#print data
	scraper.close()
	
	# insert data into database
	con = sqlite3.connect(db)
	cur = con.cursor()
	
	# insert only if the timestamp is unknown
	sql = "INSERT INTO playlist (dt, song, artist, album, cover_id)" \
	      "SELECT ?, ?, ?, ?, ? " \
	      "WHERE NOT EXISTS(SELECT 1 FROM playlist WHERE dt = %d)"
	for rec in data:
		d = (int(rec[0].strftime("%s")), rec[1].decode("utf-8"), \
		     rec[2].decode("utf-8"), rec[3].decode("utf-8"), rec[4])
		#print sql % (d[0])
		cur.execute(sql % (d[0]), d)
	
	con.commit()
	con.close()
	
	fp = open(last_update, "w")
	fp.write(str(datetime.now()).split(".")[0])
	fp.close()

