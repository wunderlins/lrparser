#!/usr/bin/env python
# -*- coding: UTF-8 -*-

import os
from flask import Flask
from flask import Response
from flask import render_template
import sqlite3
from datetime import datetime
from urllib import quote_plus
from config import *

app = Flask(__name__)

def dbconn():
	con = sqlite3.connect(db)
	cur = con.cursor()
	return (con, cur)	
	
def get_data(cur, step=20, start=0):
	sql = "SELECT * FROM playlist ORDER BY dt DESC LIMIT %d OFFSET %d" % (step, start)
	cur.execute(sql)

@app.route('/csv')
def csv():
	con, cur = dbconn()
	
	con, cur = dbconn()
	get_data(cur, step=limit)	
	
	buffer = "id;unix-tst;title;artist;album\n"
	
	while True:
		row = cur.fetchone()
		if row == None:
			break
		buffer += str(row[0]) + ";\"" + unicode(row[1]) + "\";\"" + \
		          unicode(row[2]) + "\";\"" + unicode(row[3]) + "\";\"" + "\n"
	
	return Response(buffer, mimetype='text/plain')


@app.route('/cover/<int:id>')
def cover(id):
	con, cur = dbconn()
	sql = "SELECT size, contenttype, data FROM covers WHERE id = ?"
	cur.execute(sql, (id,))
	rec = cur.fetchone()
	
	return Response(rec[2], mimetype=rec[1])
		
@app.route('/')
def playlist():
	
	fp = open(last_update, "r")
	lastupdate = fp.read()
	fp.close()
	
	con, cur = dbconn()
	get_data(cur, step=200)	
	
	res = cur.fetchall()
	records = []
	for row in res:
		r = []
		r.append(str(row[0]))
		r.append(quote_plus(row[2].encode('utf8') + " " + row[3].encode('utf8')))
		r.append(str(datetime.fromtimestamp(row[1]).strftime('%d.%m.%y %H:%M')))
		r.append(unicode(row[2]))
		r.append(unicode(row[3]))
		r.append(unicode(row[4]))
		records.append(r)
	
	con.close()
	return render_template('playlist.html', records=records, lastupdate=lastupdate)
		
if __name__ == "__main__":
	
	# observe template and static file changes 
	extra_dirs = ['static', 'templates',]
	extra_files = extra_dirs[:]
	for extra_dir in extra_dirs:
		for dirname, dirs, files in os.walk(extra_dir):
			for filename in files:
				filename = os.path.join(dirname, filename)
				if os.path.isfile(filename):
					extra_files.append(filename)


	app.run(debug=True, extra_files=extra_files) 
